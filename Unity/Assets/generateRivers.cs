/**
 *  \class generateRivers
 *  generateRivers is run within YellowstoneFalls, and controls the generation
 *  and movement of GameObjects instantiated from the River prefab object.
 *
 *  This object has the RiverRunning FMOD event attached.
 *
 *  The objects are generated and placed some distance behind the painting,
 *  and move towards the visitor and to the right, in a similar motion as
 *  described by the river in the painting.
 *
 *  They are generated by the spawnRiver() method, which is repeatedly called
 *  through the use of InvokeRepeating() in StartRiver(). The StartRiver()
 *  method is a public method that is called by YellowstoneFalls when the
 *  visitor enters the painting.
 */ 
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;

public class generateRivers : MonoBehaviour
{
    /**
     *  riverPrefab is a reference to the River prefab GameObject, to which the 
     *  RiverRunning FMOD event is attached.
     */
    public GameObject riverPrefab;

    /**
     *  respawnTime denotes the interval in seconds between successive called to 
     *  spawnRiver().
     */
    public float respawnTime = 3.0f;

    /**
     *  The instantiated instance of the River prefab are added to the 
     *  riverObjects List so that they can be monitored and removed when 
     *  the visitor exits the painting.
     */
    private List<GameObject> riverObjects = new List<GameObject>();

    /**
     *  StartRiver() is a public method called by YellowstoneFalls
     *  when the visitor enters the painting. It starts the repeated calling
     *  of spanRiver() to periodically generate new river objects.
     */
    public void StartRiver() {
      InvokeRepeating("spawnRiver", 0.0f, respawnTime);
    }

    /**
     *  StopRiver() is a public method called by YellowstoneFalls when the 
     *  visitor exits the painting. 
     *
     *  It first cancels the repeated calls to spawnRiver().
     *
     *  It then iterates over all members of the riverObjects List and sets
     *  the Z velocity of each to 20m/s. This causes them to fade to the right 
     *  of the visitor.
     *
     *  Each river object has a script attached that automatically destroys the object
     *  when it has ventured beyond its audible range. 
     */
    public void StopRiver() {
      CancelInvoke("spawnRiver");
      for(int i = 0; i < riverObjects.Count; i++) {
        if(riverObjects[i]){
          Rigidbody thisRiverObject = riverObjects[i].GetComponent<Rigidbody>();
          Vector3 vel = thisRiverObject.velocity;
          thisRiverObject.velocity = new Vector3(vel.x, 0f, 20f);
        }
      }
    }

    /**
     *  spawnRiver() is called repeatedly through the use of InvokeRepeating() in
     *  the StartRiver() method. It instantiates a new GameObject from the riverPrefab
     *  prefab and sets its position. It then adds it to the riverObjects List.
     */
    private void spawnRiver() {
      GameObject r = Instantiate(riverPrefab) as GameObject;
      Vector3 newPos = new Vector3(-2.0f, -2.0f, 0.0f);
      r.transform.position = transform.TransformPoint(newPos);
      riverObjects.Add(r);
    }
}
